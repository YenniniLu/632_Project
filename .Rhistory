knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
library(tidyverse)
library(stringr)
library(randomForest)
library(vip)
library(rpart)
library(rpart.plot)
library(caret)
library(tidytext)
library(tidyr)
df_raw <- read.csv("data.csv")
head(df_raw)
df_raw %>% select(Views, Subscribers, Released, Length) %>% head(10)
df <- read_csv("cleaned_data.csv")
df$CC <- as.factor(df$CC)
df$Category <- as.factor(df$Category)
df$Subscribers <- as.numeric(df$Subscribers)
head(df)
table(df$CC)
boxplot(log(Views) ~ CC, data = df)
summary(df$Length)
summary(df$Released)
summary(df$Subscribers)
pairs(Views ~ CC + Released + Length + Subscribers + Category, data=df)
df_script <- df %>%
select(Title, Transcript)
head(df_script)
# just use this code to watch the video to check the transcript
df %>%
filter(Title == "Former CIA Agent Breaks Down Jeffrey Epstein Case")
data("stop_words")
custom_stop_words <- rbind(stop_words, c("_", "custom"))
#bigram
bigrams_separated <- df_script %>%
group_by(Title) %>%
# unnest Transcript in bigram format
unnest_tokens(bigram, Transcript, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>% # separate bigram
filter(!word1 %in% custom_stop_words$word) %>% # filter out all the stop words
filter(!word2 %in% custom_stop_words$word)
bigrams_united <- bigrams_separated %>%
unite(bigram, word1, word2, sep = " ")  # unite words back together
head(bigrams_separated)
# bigram tf-idf
bigram_tf_idf <- bigrams_united %>%
count(Title, bigram) %>%
bind_tf_idf(bigram, Title, n) %>%
arrange(desc(tf_idf))
head(bigram_tf_idf)
# Using bigrams to provide context in sentiment analysis
negation_words <- c("not", "no", "never", "without")
bigrams_separated %>%
filter(word1 %in% negation_words) %>%
inner_join(get_sentiments("afinn"), by = c(word2 = "word")) %>%
count(word1, word2, value, sort = TRUE)
df_script<- df_script %>%
group_by(Title) %>%
unnest_tokens(word, Transcript) %>%
anti_join(custom_stop_words) %>%
count(word, sort = TRUE) %>%
mutate(total = sum(n)) %>%
ungroup()
#inner_join(get_sentiments("afinn")) #%>%
#summarise(sentiment = sum(value))
#mutate(total = sum(word)) %>%
#mutate(perc = round(n/total, 2))
head(df_script)
df_script %>%
group_by(Title) %>%
inner_join(get_sentiments("afinn")) %>%
#mutate(afinn_score = sum(value)) %>%
#mutate(perc = round(n/total, 2)) %>%
bind_tf_idf(word, Title, n) %>%
mutate(afinn_score = sum(value*tf_idf)) %>%
ungroup()
#filter(Title == "2018 Jeep Trackhawk Review - The SUV That's Quicker Than a Supercar")
df %>% inner_join(df_script)
set.seed(652)
n <- nrow(df)
train_index <- sample(1:n, round(0.7*n))
df_train <- df[train_index,]
df_test <- df[-train_index,]
lm1 <- lm(Views ~ CC + Released + Length + Subscribers, data=df)
summary(lm1)
# Fit tree model
t1 <- rpart(Views ~ CC + Released + Category + Length + Subscribers,
data = df_train,
method = "anova")
# Plot the desicion tree
rpart.plot(t1)
# Plot R-square vs Splits and the Relative Error vs Splits.
rsq.rpart(t1)
# Make prediction
pred_tree <- predict(t1, newdata = df_test)
# Compute the RMSE
RMSE(df_test$Views, pred_tree)
set.seed(652)
rf1 <- randomForest(Views ~ CC + Released + Category + Length + Subscribers, importance = TRUE, data = df_train)
rf1
vip(rf1, num_features = 14,  include_type = TRUE)
# Make prediction
pred_rf <- predict(rf1, newdata = df_test)
# Compute the RMSE
RMSE(df_test$Views, pred_rf)
df_afinn <- df_script %>%
group_by(Title) %>%
inner_join(get_sentiments("afinn")) %>%
#mutate(afinn_score = sum(value)) %>%
#mutate(perc = round(n/total, 2)) %>%
bind_tf_idf(word, Title, n) %>%
mutate(afinn_score = sum(value*tf_idf)) %>%
ungroup()
#filter(Title == "2018 Jeep Trackhawk Review - The SUV That's Quicker Than a Supercar")
df %>%
group_by(Title) %>%
cbind(df_afinn$afinn_score)
afinn_score <- df_afinn$afinn_score
str(afinn_score)
df %>% cbind(afinn_score)
head(df_afinn)
df_afinn <- df_afinn %>%
select(Title, afinn_score)
head(df_afinn)
df <- df %>%
full_join(df_afinn)
head(df)
df_afinn <- df_afinn %>%
select(Title, afinn_score) %>%
unique(Title)
df_afinn <- df_afinn %>%
select(Title, afinn_score) %>%
unique(Title)
df_afinn <- df_afinn %>%
select(Title, afinn_score) %>%
unique()
i
head(df_afinn)
df <- df %>%
full_join(df_afinn)
head(df)
df_afinn <- df_afinn %>%
select(Title, afinn_score) %>%
unique() %>%
ungroup()
head(df_afinn)
df <- df %>%
full_join(df_afinn)
df <- df %>%
full_join(df_afinn)
head(df)
df_afinn
df <- df %>%
full_join(df_afinn)
df <- df %>%
left_join(df_afinn)
head(df)
df <- df %>%
right_join(df_afinn)
head(df)
?unique
df_afinn <- df_afinn %>%
select(Title, afinn_score) %>%
unique() %>%
ungroup()
df <- df %>%
right_join(df_afinn)
head(df)
df <- df %>%
right_join(df_afinn) %>%
unique()
head(df)
df
View(df_script)
lm1 <- lm(Views ~ CC + Released + Length + Subscribers + Category + afinn_score, data=df)
summary(lm1)
lm1 <- lm(Views ~ CC + Released + Length + Subscribers + Category + afinn_score, data=df)
summary(lm1)
lm1 <- lm(Views ~ CC + Released + Length + Subscribers + Category + afinn_score, data=df)
summary(lm1)
df <- df %>%
right_join(df_afinn) %>%
unique()
df
lm1 <- lm(Views ~ CC + Released + Length + Subscribers + Category + afinn_score, data=df)
lm1 <- lm(Views ~ CC + Released + Length + Subscribers + Category + afinn_score, data=df)
summary(lm1)
lm1 <- lm(Views ~ CC + Released + Length + Subscribers + afinn_score, data=df)
summary(lm1)
pairs(Views ~ CC + Released + Length + Subscribers + Category + afinn_score, data=df)
lm2 <- lm(Views ~ CC + Released + log10(Length) + Subscribers + afinn_score, data=df)
summary(lm2)
plot(predict(lm1), resid(lm1), xlab = "Fitted values", ylab = "Residuals")
plot(predict(lm1), resid(lm1), xlab = "Fitted values", ylab = "Residuals")
abline(h=0)
hist(resid(lm1))
mfrow(c(1,2))
par(mfrow=c(1,2))
hist(resid(lm1))
qqnorm(resid(lm1))
qqline(resid(lm1))
plot(predict(lm2), resid(lm2), xlab = "Fitted values", ylab = "Residuals")
abline(h=0)
par(mfrow=c(1,2))
hist(resid(lm2))
qqnorm(resid(lm2))
qqline(resid(lm2))
